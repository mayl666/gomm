<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.gome.upm.dao.UrlRecordMapper" >
  <resultMap id="BaseResultMap" type="com.gome.upm.domain.UrlRecord" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="visitTime" property="visitTime" jdbcType="TIMESTAMP" />
    <result column="visitTake" property="visitTake" jdbcType="INTEGER" />
    <result column="returnCode" property="returnCode" jdbcType="VARCHAR" />
    <result column="survival" property="survival" jdbcType="INTEGER" />
    <result column="matching" property="matching" jdbcType="INTEGER" />
    <result column="uid" property="uid" jdbcType="BIGINT" />
  </resultMap>
  
  <sql id="Base_Column_List" >
    id, visitTime, visitTake, returnCode, survival,matching, uid
  </sql>
  
  <select id="selectUrlRecordListByPage" resultMap="BaseResultMap" parameterType="com.gome.upm.common.Page">
  	select
  	<include refid="Base_Column_List"></include>
  	from gm_url_record
  	where 1=1 
 	<if test="conditions.id != null" >
      and id = #{conditions.id,jdbcType=BIGINT} 
    </if>  
    <if test="conditions.uid != null" >
      and uid = #{conditions.uid,jdbcType=BIGINT}
    </if>
    <if test="conditions.startTime != null and conditions.startTime != '' and conditions.endTime != null and conditions.endTime != ''" >
      and visitTime between #{conditions.startTime} and #{conditions.endTime}
    </if>
    <if test="conditions.returnCode != null" >
      and returnCode = #{conditions.returnCode,jdbcType=VARCHAR}
    </if>
	<if test="conditions.survival != null" >
      and survival = #{conditions.survival,jdbcType=INTEGER}  
    </if>
    <if test="conditions.matching != null" >
      and matching = #{conditions.matching,jdbcType=INTEGER}  
    </if>
    order by visitTime desc
    <if test="start != null and pageSize != null">
    	LIMIT #{start},#{pageSize}
    </if>
  </select>
  <select id="selectTotalResultByConditions" resultType="java.lang.Integer" parameterType="com.gome.upm.domain.UrlRecord">
  	select count(*) from gm_url_record
 	where 1=1 
 	<if test="id != null" >
      and id = #{id,jdbcType=BIGINT} 
    </if>  
    <if test="uid != null" >
      and uid = #{uid,jdbcType=BIGINT}
    </if>
    <if test="startTime != null and startTime != '' and endTime != null and endTime != ''" >
      and visitTime between #{startTime} and #{endTime}
    </if>
    <if test="returnCode != null" >
      and returnCode = #{returnCode,jdbcType=VARCHAR}
    </if>
	<if test="survival != null" >
      and survival = #{survival,jdbcType=INTEGER}  
    </if>
    <if test="matching != null" >
      and matching = #{matching,jdbcType=INTEGER}  
    </if>
  </select>
  <select id="selectUrlRecordById" parameterType="java.lang.Long" resultMap="BaseResultMap">
  	select 
  	<include refid="Base_Column_List"></include>
  	from gm_url_record 
 	where id = #{id} 
  </select>
  <select id="selectUrlRecordListByUrlRecord" resultMap="BaseResultMap" parameterType="com.gome.upm.domain.UrlRecord">
  	select 
  	<include refid="Base_Column_List"></include>  
    from gm_url_record 
  	where 1=1 
 	<if test="id != null" >
      and id = #{id,jdbcType=BIGINT} 
    </if>  
    <if test="uid != null" >
      and uid = #{uid,jdbcType=BIGINT}
    </if>
    <if test="startTime != null and startTime != ''" >
      and visitTime &lt; #{startTime}
    </if>
    <if test="returnCode != null" >
      and returnCode = #{returnCode,jdbcType=VARCHAR}
    </if>
	<if test="survival != null" >
      and survival = #{survival,jdbcType=INTEGER}  
    </if>
    <if test="matching != null" >
      and matching = #{matching,jdbcType=INTEGER}  
    </if>
  </select>
  <delete id="deleteByTime" parameterType="java.lang.String">
  	delete from 
  	gm_url_record where 1=1 and visitTime &lt; #{startTime}
  </delete>
  
  <delete id="batchDeleteByUids" parameterType="java.lang.reflect.Array">
  	delete from gm_url_record
    where uid in
    <foreach collection="array" index="index" item="item" open="(" separator="," close=")">  
            #{item} 
    </foreach> 
  </delete>
</mapper> 